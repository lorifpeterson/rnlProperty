using IR.Application.CUST.Queries;
using System.Collections.Generic;
using System.Linq;

namespace IR.Application.Rules
{
    public class RuleFactory : IRuleFactory
    {
        private IEnumerable<IRule> _rules;

        public RuleFactory(IEnumerable<IRule> rules)
        {
            _rules = rules;
        }

        public IRule Create(UnmatchedInvoiceHandling code)
        {
            switch (code)
            {
                case UnmatchedInvoiceHandling.Discard:
                    return _rules.FirstOrDefault(x => x.GetType().Name == "DiscardRule");
                case UnmatchedInvoiceHandling.Keep:
                    return _rules.FirstOrDefault(x => x.GetType().Name == "KeepRule");
                default:
                    break;
            }

            return null;
        }
    }
}

using IR.Application.CUST.Queries;

namespace IR.Application.Rules
{
    public interface IRuleFactory
    {
        IRule Create(UnmatchedInvoiceHandling code);
    }
}

using IR.Application.CUST.Queries;
using System.Threading.Tasks;

namespace IR.Application.Rules
{
    public interface IRule
    {
        Task ExecuteAsync(CustModel customer);
    }
}

using System;
using System.Threading.Tasks;
using IR.Application.CUST.Queries;
using IR.Application.Interfaces;
using IR.Application.INV_IDEN_EXTRACT.Queries;
using IR.Application.REM_WH_REF_ITEM.Queries;
using IR.Application.INV.Commands;
using IR.Application.INV_STS_HIST.Commands;
using System.Collections.Generic;
using System.Linq;

namespace IR.Application.Rules
{
    public class DiscardRule : IRule
    {
        private readonly IDataUnitOfWork _database;
        private readonly IInvIdenExtractQuery _invIdenExtractQuery;
        private readonly IRemWhRefItemQuery _remWhRefItemQuery;
        private readonly IInvCommand _invCommand;
        private readonly IInvStsHistCommand _invStsHistCommand;

        public DiscardRule(IDataUnitOfWork database, IInvIdenExtractQuery invIdenExtractQuery, IRemWhRefItemQuery remWhRefItemQuery, IInvCommand invCommand, IInvStsHistCommand invStsHistCommand)
        {
            _database = database;
            _invIdenExtractQuery = invIdenExtractQuery;
            _remWhRefItemQuery = remWhRefItemQuery;
            _invCommand = invCommand;
            _invStsHistCommand = invStsHistCommand;

        }
        public async Task ExecuteAsync(CustModel customer)
        {
            await ProcessUnmatchedInvoices(customer, await _invIdenExtractQuery.GetUnmatchedInvoices(customer.TxnId, customer.ProcDt));
            await ProcessUnmatchedInvoices(customer, await _remWhRefItemQuery.GetUnmatchedInvoices(customer.TxnId));
        }

        private async Task ProcessUnmatchedInvoices(CustModel customer, IEnumerable<InvIdenExtractModel> unmatchedInvoices)
        {
            foreach (var invoice in unmatchedInvoices)
            {
                await _invCommand.UpdateInvoiceStatusAsync(invoice.InvId, InvStatusCode.Discarded);
                await _invStsHistCommand.InsertInvStsHistRecord(customer, invoice.InvId, InvStatusCode.Discarded);

                await _database.SaveChangesAsync();
            }
        }

        private async Task ProcessUnmatchedInvoices(CustModel customer, IEnumerable<RemWhRefItemModel> unmatchedInvoices)
        {
            foreach (var invId in unmatchedInvoices.Where(x => x.InvId != null).Select(x => x.InvId).Distinct())
            {
                await _invCommand.UpdateInvoiceStatusAsync(invId.Value, InvStatusCode.Discarded);
                await _invStsHistCommand.InsertInvStsHistRecord(customer, invId.Value, InvStatusCode.Discarded);

                await _database.SaveChangesAsync();
            }
        }
    }
}

