using Microsoft.VisualStudio.TestTools.UnitTesting;
using IR.Application.Rules;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using IR.Application.INV_IDEN_EXTRACT.Queries;
using IR.Application.REM_WH_REF_ITEM.Queries;
using Moq;
using IR.Application.CUST_REF_TYPE.Queries;
using IR.Application.REF_ITEM.Queries;
using IR.Application.REF_ITEM.Commands;
using IR.Application.INV.Commands;
using IR.Application.INV_STS_HIST.Commands;
using IR.Application.CUST.Queries;
using IR.Application.Interfaces;
using FluentAssertions;

namespace IR.Application.Rules.Tests
{
    [TestClass()]
    public class KeepRuleTests
    {
        Mock<IDataUnitOfWork> _database;
        Mock<IInvIdenExtractQuery> _invIdenExtractQuery;
        Mock<IRemWhRefItemQuery> _remWhRefItemQuery;
        Mock<IGetCustRefTypeQuery> _getCustRefTypeQuery;
        Mock<IGetRefItemQuery> _getRefItemQuery;
        Mock<IAddRefItemCommand> _addRefItemCommand;
        Mock<IInvCommand> _invCommand;
        Mock<IInvStsHistCommand> _invStsHistCommand;

        private ICollection<Domain.Entities.INV> _inv;
        private ICollection<Domain.Entities.REF_ITEM> _refItem;
        private ICollection<Domain.Entities.INV_STS_HIST> _invStsHist;

        [TestInitialize]
        public void Setup()
        {
            _database = new Mock<IDataUnitOfWork>();
            _invIdenExtractQuery = new Mock<IInvIdenExtractQuery>();
            _remWhRefItemQuery = new Mock<IRemWhRefItemQuery>();
            _getCustRefTypeQuery = new Mock<IGetCustRefTypeQuery>();
            _getRefItemQuery = new Mock<IGetRefItemQuery>();
            _addRefItemCommand = new Mock<IAddRefItemCommand>();
            _invCommand = new Mock<IInvCommand>();
            _invStsHistCommand = new Mock<IInvStsHistCommand>();

            _inv = new List<Domain.Entities.INV>();
            _refItem = new List<Domain.Entities.REF_ITEM>();
            _invStsHist = new List<Domain.Entities.INV_STS_HIST>();

            _getCustRefTypeQuery.Setup(r => r.ExecuteAsync(It.IsAny<long>(), It.IsAny<int>())).ReturnsAsync((long i, int t) => new CustRefTypeModel() { RefTypeId = t, DataType = "A", SeqId = 2 });
            _getRefItemQuery.Setup(r => r.ExecuteNewRowSeqAsync(It.IsAny<CustModel>())).ReturnsAsync(4);

            _addRefItemCommand.Setup(r => r.ExecuteAsync(It.IsAny<Domain.Entities.REF_ITEM>())).Callback<Domain.Entities.REF_ITEM>(p => _refItem.Add(p));

            _invStsHistCommand.Setup(r => r.InsertInvStsHistRecord(It.IsAny<CustModel>(), It.IsAny<long>(), It.IsAny<int>())).Callback((CustModel cust, long inv, int sts) => 
                {
                    _invStsHist.Add(new Domain.Entities.INV_STS_HIST() { LOCKBOX_ID = cust.LockboxId, INV_ID = inv, INV_STS_ID = sts });
                }
            ).Returns(Task.FromResult(0));

            _invCommand.Setup(r => r.UpdateInvoiceStatusAsync(It.IsAny<long>(), It.IsAny<int>())).Callback((long inv, int sts) =>
                {
                    _inv.Add(new Domain.Entities.INV { INV_ID = inv, INV_STS_ID = sts });
                }
            ).Returns(Task.FromResult(0));

        }

        [TestMethod()]
        public async Task ExecuteAsync_InvIdenExtract_ProcessUnmatchedInvoices()
        {
            var expectedRefItem = new List<Domain.Entities.REF_ITEM>()
            {
                new Domain.Entities.REF_ITEM {
                    TXN_ID = 10,
                    INV_ID = 1,
                    ALNUM_VAL_TX = "123",
                    REF_TYPE_ID = 100,
                    REF_ITEM_COL_SEQ_NB = 2,
                    REF_ITEM_ROW_SEQ_NB = 4,
                    CRE_BY_CD = "0",
                    LAST_UPDT_USR_ID = 2
                }
            };

            var expectedInv = new List<Domain.Entities.INV>() { new Domain.Entities.INV { INV_ID = 1, INV_STS_ID = 106 } };
            var expectedInvStsHst = new List<Domain.Entities.INV_STS_HIST>() { new Domain.Entities.INV_STS_HIST { INV_ID = 1, INV_STS_ID = 106 } };

            _invIdenExtractQuery.Setup(i => i.GetUnmatchedInvoices(It.IsAny<long>(), It.IsAny<DateTime?>())).ReturnsAsync(new List<InvIdenExtractModel>() { new InvIdenExtractModel { InvId = 1, ExtractValue = "123", RefId = 100 } });

            var rule = new KeepRule(_database.Object, _invIdenExtractQuery.Object, _remWhRefItemQuery.Object, _getCustRefTypeQuery.Object, _getRefItemQuery.Object, _addRefItemCommand.Object, _invCommand.Object, _invStsHistCommand.Object);
            await rule.ExecuteAsync(new CustModel { CustId = 1, UnmatchedInvoiceCode = "2", TxnId = 10  });

            _inv.Should().BeEquivalentTo(expectedInv);
            _invStsHist.Should().BeEquivalentTo(expectedInvStsHst);
            _refItem.Should().BeEquivalentTo(expectedRefItem, opt => opt.Excluding(s => s.SelectedMemberPath.EndsWith("_TS")));
        }

        [TestMethod()]
        public async Task ExecuteAsync_RemWhRefItem_ProcessUnmatchedInvoices()
        {
            var expectedRefItem = new List<Domain.Entities.REF_ITEM>()
            {
                new Domain.Entities.REF_ITEM {
                    TXN_ID = 10,
                    INV_ID = 1,
                    ALNUM_VAL_TX = "123",
                    REF_TYPE_ID = 100,
                    REF_ITEM_COL_SEQ_NB = 2,
                    REF_ITEM_ROW_SEQ_NB = 4,
                    CRE_BY_CD = "0",
                    LAST_UPDT_USR_ID = 2
                }
            };

            var expectedInv = new List<Domain.Entities.INV>() { new Domain.Entities.INV { INV_ID = 1, INV_STS_ID = 106 } };
            var expectedInvStsHst = new List<Domain.Entities.INV_STS_HIST>() { new Domain.Entities.INV_STS_HIST { INV_ID = 1, INV_STS_ID = 106 } };

            _remWhRefItemQuery.Setup(i => i.GetUnmatchedInvoices(It.IsAny<long>(), It.IsAny<DateTime?>())).ReturnsAsync(new List<RemWhRefItemModel>() { new RemWhRefItemModel { InvId = 1, AlumValue = "123", RefTypeId = 100 } });

            var rule = new KeepRule(_database.Object, _invIdenExtractQuery.Object, _remWhRefItemQuery.Object, _getCustRefTypeQuery.Object, _getRefItemQuery.Object, _addRefItemCommand.Object, _invCommand.Object, _invStsHistCommand.Object);
            await rule.ExecuteAsync(new CustModel { CustId = 1, UnmatchedInvoiceCode = "2", TxnId = 10 });

            _inv.Should().BeEquivalentTo(expectedInv);
            _invStsHist.Should().BeEquivalentTo(expectedInvStsHst);
            _refItem.Should().BeEquivalentTo(expectedRefItem, opt => opt.Excluding(s => s.SelectedMemberPath.EndsWith("_TS")));
        }
    }
}
